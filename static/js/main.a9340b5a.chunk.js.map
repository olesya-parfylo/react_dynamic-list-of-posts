{"version":3,"sources":["components/Loader/Loader.tsx","components/PostsList/PostsList.tsx","api/api.ts","api/post.ts","api/comments.ts","components/NewCommentForm/NewCommentForm.tsx","components/PostDetails/PostDetails.tsx","App.tsx","index.tsx"],"names":["Loader","className","PostsList","posts","setSelectedPostId","selectedPostId","loading","map","post","userId","title","id","type","onClick","disabled","BASE_URL","postsUrl","request","url","fetch","then","response","json","NewCommentForm","setNewComment","useState","name","email","body","comment","setComment","value","placeholder","onChange","target","currentComment","PostDetails","postId","comments","setComments","setPost","showComments","setShowComments","loadingPost","setLoadingPost","loadingComments","setLoadingComments","idDeletedComment","setIdDeletedComment","newComment","useEffect","getPostDetails","receivedPost","getComments","useCallback","filter","getPostComments","receivedComments","useMemo","a","method","length","createdAt","updatedAt","headers","JSON","stringify","toUpperCase","currentValue","App","setPosts","UserSelect","setUserSelect","setLoading","receivedPosts","postItem","htmlFor","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.a9340b5a.chunk.js","sourcesContent":["import React from 'react';\nimport './Loader.scss';\n\nexport const Loader: React.FC = () => (\n  <div className=\"Loader\">\n    <div className=\"Loader__content\" />\n  </div>\n);\n","import React from 'react';\nimport { Loader } from '../Loader';\nimport './PostsList.scss';\n\nexport type Post = {\n  id: number,\n  userId: number,\n  title: string,\n  body: string,\n  createdAt: string,\n  updatedAt: string,\n};\n\ntype Props = {\n  posts: Post[],\n  loading: boolean,\n  setSelectedPostId: (selectedPostId: number) => void,\n  selectedPostId: number,\n};\n\nexport const PostsList: React.FC<Props> = ({\n  posts,\n  setSelectedPostId, selectedPostId,\n  loading,\n}) => {\n  return (\n    <div className=\"PostsList\">\n      <h2>Posts:</h2>\n      {loading ? (\n        <ul className=\"PostsList__list\">\n          {posts.map((post: Post) => (\n            <li key={post.id} className=\"PostsList__item\">\n              <div>\n                <b>\n                  {`[User #${post.userId}]:`}\n                </b>\n                {post.title}\n              </div>\n              {selectedPostId !== post.id && (\n                <button\n                  type=\"button\"\n                  className=\"PostsList__button button\"\n                  onClick={() => {\n                    setSelectedPostId(post.id);\n                  }}\n                >\n                  Open\n                </button>\n              )}\n              {selectedPostId === post.id && (\n                <button\n                  type=\"button\"\n                  className=\"PostsList__button button\"\n                  disabled\n                >\n                  Close\n                </button>\n              )}\n            </li>\n          ))}\n        </ul>\n      ) : (\n        <Loader />\n      )}\n    </div>\n  );\n};\n","export const BASE_URL = 'https://mate.academy/students-api';\n","import { BASE_URL } from './api';\n\nexport const postsUrl = `${BASE_URL}/posts`;\n\nexport function request(url: string) {\n  return fetch(url)\n    .then(response => response.json());\n}\n\nexport function getUserPosts() {\n  return request(postsUrl);\n}\n\nexport function getPostDetails(postId: number) {\n  return request(`${postsUrl}/${postId}`);\n}\n","import { BASE_URL } from './api';\nimport { request } from './post';\n\nexport type Comment = {\n  id: number,\n  postId: number,\n  name: string,\n  email: string,\n  body: string,\n  createdAt: string,\n  updatedAt: string,\n};\n\nexport function getPostComments(postId: number) {\n  return request(`${BASE_URL}/comments`)\n    .then(response => response.filter((comment: Comment) => comment.postId === postId));\n}\n\nexport const createComment = (comment: Comment) => {\n  return fetch(`${BASE_URL}/comments`, {\n    method: 'POST',\n    headers: {\n      'Content-type': 'application/json; charset=UTF-8',\n    },\n    body: JSON.stringify(comment),\n  });\n};\n\nexport const deleteComment = (id: number) => {\n  return fetch(\n    `${BASE_URL}/comments/${id}`,\n    { method: 'DELETE' },\n  );\n};\n","import React, { useState } from 'react';\nimport './NewCommentForm.scss';\n\nexport type NewComment = {\n  name: string,\n  email: string,\n  body: string,\n};\n\ntype Props = {\n  setNewComment: (newComment: NewComment) => void,\n};\n\nexport const NewCommentForm: React.FC<Props> = ({ setNewComment }) => {\n  const [comment, setComment] = useState<NewComment>({\n    name: '',\n    email: '',\n    body: '',\n  });\n\n  return (\n    <form className=\"NewCommentForm\">\n      <div className=\"form-field\">\n        <input\n          type=\"text\"\n          name=\"name\"\n          value={comment.name}\n          placeholder=\"Your name\"\n          className=\"NewCommentForm__input\"\n          onChange={({ target }) => {\n            setComment((currentComment: NewComment) => ({\n              ...currentComment,\n              name: target.value,\n            }));\n          }}\n        />\n      </div>\n\n      <div className=\"form-field\">\n        <input\n          type=\"email\"\n          name=\"email\"\n          value={comment.email}\n          placeholder=\"Your email\"\n          className=\"NewCommentForm__input\"\n          onChange={({ target }) => {\n            setComment((currentComment: NewComment) => ({\n              ...currentComment,\n              email: target.value,\n            }));\n          }}\n        />\n      </div>\n\n      <div className=\"form-field\">\n        <textarea\n          name=\"body\"\n          value={comment.body}\n          placeholder=\"Type comment here\"\n          className=\"NewCommentForm__input\"\n          onChange={({ target }) => {\n            setComment((currentComment: NewComment) => ({\n              ...currentComment,\n              body: target.value,\n            }));\n          }}\n        />\n      </div>\n\n      <button\n        type=\"button\"\n        className=\"NewCommentForm__submit-button button\"\n        onClick={() => {\n          setNewComment(comment);\n          setComment({ name: '', email: '', body: '' });\n        }}\n      >\n        Add a comment\n      </button>\n    </form>\n  );\n};\n","import React, {\n  useState,\n  useEffect,\n  useMemo,\n  useCallback,\n} from 'react';\nimport {\n  getPostComments,\n  Comment,\n  createComment,\n  deleteComment,\n} from '../../api/comments';\nimport { getPostDetails } from '../../api/post';\nimport { NewCommentForm, NewComment } from '../NewCommentForm';\nimport { Post } from '../PostsList';\nimport { Loader } from '../Loader';\nimport './PostDetails.scss';\n\ntype Props = {\n  postId: number,\n};\n\nexport const PostDetails: React.FC<Props> = ({ postId }) => {\n  const [comments, setComments] = useState<Comment[]>([]);\n  const [post, setPost] = useState<Post>();\n\n  const [showComments, setShowComments] = useState(true);\n  const [loadingPost, setLoadingPost] = useState(false);\n  const [loadingComments, setLoadingComments] = useState(false);\n  const [idDeletedComment, setIdDeletedComment] = useState(0);\n  const [newComment, setNewComment] = useState<NewComment>();\n\n  useEffect(() => {\n    getPostDetails(postId)\n      .then(receivedPost => {\n        setPost(receivedPost);\n        setLoadingPost(true);\n      });\n  }, [postId]);\n\n  const getComments = useCallback(() => {\n    getPostComments(postId)\n      .then(receivedComments => {\n        setComments(receivedComments);\n        setLoadingComments(true);\n      });\n  }, [postId, idDeletedComment, newComment]);\n\n  useEffect(getComments, [postId, idDeletedComment, newComment]);\n\n  useMemo(async () => {\n    if (idDeletedComment) {\n      await deleteComment(idDeletedComment);\n    }\n\n    getComments();\n  }, [idDeletedComment]);\n\n  useMemo(async () => {\n    if (newComment) {\n      await createComment({\n        ...newComment,\n        id: comments.length,\n        postId,\n        createdAt: '',\n        updatedAt: '',\n      });\n    }\n\n    getComments();\n  }, [newComment]);\n\n  return (\n    <>\n      {loadingPost && post ? (\n        <div className=\"PostDetails\">\n          <h2>\n            {`${post.title.toUpperCase()}:`}\n          </h2>\n\n          <section className=\"PostDetails__post\">\n            <p>\n              {post.body}\n            </p>\n          </section>\n\n          <section className=\"PostDetails__comments\">\n            {comments.length > 0 && (\n              <button\n                type=\"button\"\n                className=\"PostDetails__button button\"\n                onClick={() => {\n                  setShowComments(currentValue => !currentValue);\n                }}\n              >\n                {showComments ? 'Hide' : 'Show'}\n                {` ${comments.length} comments`}\n              </button>\n            )}\n\n            {loadingComments && comments ? (\n              showComments && (\n                <ul className=\"PostDetails__list\">\n                  {comments.map(currentComment => (\n                    <li\n                      className=\"PostDetails__list-item\"\n                      key={currentComment.id}\n                    >\n                      <button\n                        type=\"button\"\n                        className=\"PostDetails__remove-button button\"\n                        onClick={() => {\n                          setIdDeletedComment(currentComment.id);\n                        }}\n                      >\n                        X\n                      </button>\n                      <p>\n                        {currentComment.body}\n                      </p>\n                    </li>\n                  ))}\n                </ul>\n              )\n            ) : (\n              <Loader />\n            )}\n          </section>\n          <section>\n            <div className=\"PostDetails__form-wrapper\">\n              <NewCommentForm\n                setNewComment={setNewComment}\n              />\n            </div>\n          </section>\n        </div>\n      ) : (\n        <Loader />\n      )}\n    </>\n  );\n};\n","import React, { useEffect, useState } from 'react';\nimport './App.scss';\nimport './styles/general.scss';\nimport { Post, PostsList } from './components/PostsList';\nimport { PostDetails } from './components/PostDetails';\nimport { getUserPosts } from './api/post';\n\nconst App: React.FC = () => {\n  const [posts, setPosts] = useState<Post[]>([]);\n\n  const [UserSelect, setUserSelect] = useState(0);\n  const [selectedPostId, setSelectedPostId] = useState(0);\n  const [loading, setLoading] = useState(false);\n\n  useEffect(() => {\n    getUserPosts()\n      .then(receivedPosts => {\n        if (UserSelect === 0) {\n          setPosts(receivedPosts);\n        } else {\n          setPosts(receivedPosts.filter((postItem: Post) => UserSelect === postItem.userId));\n        }\n\n        setLoading(true);\n      });\n  }, [UserSelect]);\n\n  return (\n    <div className=\"App\">\n      <header className=\"App__header\">\n        <label htmlFor=\"posts\">\n          Select a user: &nbsp;\n\n          <select\n            className=\"App__user-selector\"\n            id=\"posts\"\n            onChange={({ target }) => {\n              setUserSelect(+target.value);\n            }}\n          >\n            <option value=\"0\">All users</option>\n            <option value=\"1\">Leanne Graham</option>\n            <option value=\"2\">Ervin Howell</option>\n            <option value=\"3\">Clementine Bauch</option>\n            <option value=\"4\">Patricia Lebsack</option>\n            <option value=\"5\">Chelsey Dietrich</option>\n            <option value=\"6\">Mrs. Dennis Schulist</option>\n            <option value=\"7\">Kurtis Weissnat</option>\n            <option value=\"8\">Nicholas Runolfsdottir V</option>\n            <option value=\"9\">Glenna Reichert</option>\n            <option value=\"10\">Leanne Graham</option>\n          </select>\n        </label>\n      </header>\n\n      <main className=\"App__main\">\n        <div className=\"App__sidebar\">\n          <PostsList\n            posts={posts}\n            setSelectedPostId={setSelectedPostId}\n            selectedPostId={selectedPostId}\n            loading={loading}\n          />\n        </div>\n\n        <div className=\"App__content\">\n          {selectedPostId !== 0 ? (\n            <PostDetails\n              postId={selectedPostId}\n            />\n          ) : (\n            'Select post'\n          )}\n        </div>\n      </main>\n    </div>\n  );\n};\n\nexport default App;\n","import ReactDOM from 'react-dom';\n\nimport App from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}